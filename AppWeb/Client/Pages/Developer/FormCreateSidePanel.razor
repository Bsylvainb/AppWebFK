@using Microsoft.Extensions.Logging
@inject ILogger<FormCreateSidePanel> Logger
@inject ISidepanelService Sidepanel
@inject HttpClient http
@inject NavigationManager uriHelper

<EditForm Model="@act"  OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />            
        <div class="mb-3">
            <label class="form-label">Primary Classification</label>
            <InputSelect @bind-Value="act.State" class="form-control">
                <option value="">Select State ...</option>
                <option value="Open">Open</option>
                <option value="Close">Closed</option>                
            </InputSelect>
        </div>
         <div class="mb-3">
            <label class="form-label">Title</label>
            <RadzenTextBox @bind-Value="@act.Tilte" />
        </div>
        <div class="mb-3">
            <label class="form-label">Description</label>
            <RadzenTextBox @bind-Value="@act.DescriptionA" />
        </div>
        @*<div class="form-check mb-3">
            <InputCheckbox class="form-check-input" id="@nameof(act.IsValidatedDesign)" @bind-Value="@act.IsValidatedDesign" />
            <label class="form-check-label" for="@nameof(act.IsValidatedDesign)">Engineering Approval</label>
        </div>*@

        <div class="mb-3">
            <label class="form-label">Production Date</label>
            @*<InputDate class="form-control" @bind-Value="@act.CloseDate" />*@
            <RadzenDatePicker @bind-Value="@act.CloseDate" TValue="DateTime?" DateRender=@DateRender DateFormat="d" Class="w-100" />
        </div>              

        <div class="d-grid gap-2">
            @*<button class="btn btn-outline-primary" type="submit">Create</button>*@
            <button type="submit" class="btn btn-success">@ButtonAction</button>
            <button class="btn btn-outline-secondary" type="reset">Reset</button>
            <button class="btn btn-outline-danger" type="button" @onclick="Sidepanel.SoftClose">Cancel</button>
        </div>
</EditForm>

@code {

    [Parameter] public ActionItem? act { get; set; }
    [Parameter] public string ButtonAction { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
   

    DateTime? value = DateTime.Now;
    DateTime values = DateTime.Now;

     void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled;               
    }



  
}